#!/bin/bash
#
# description: SLURMDBD is a database server interface for \
#              SLURM (Simple Linux Utility for Resource Management).
#
# processname: /usr/sbin/slurmdbd
# pidfile: /run/slurmdbd.pid
#
# config: /etc/slurm
#

CONFDIR=/etc/slurm
LIBDIR=/usr/lib
SBINDIR=/usr/sbin

# Source main config
if [ ! -f /etc/rc.conf ]; then
  echo "Could not find /etc/rc.conf. Are we using ARCH linux?"
  exit 1
fi
. /etc/rc.conf

# Source function library.
if [ ! -f /etc/rc.d/functions ]; then
  echo "Could not find /etc/rc.d/functions. Is some other daemon launch mechanism used?"
  exit 1
fi
. /etc/rc.d/functions

STARTPROC=daemon

function rc_status() {
  RETVAL=$?
}
function rc_exit () {
  exit $RETVAL
}
RETVAL=0

# check existance of executable
if [ ! -x $SBINDIR/slurmdbd ]; then
  echo "Could not find $SBINDIR/slurmdbd. Bad path?"
  exit 1
fi

# Source slurm specific configuration
# SLURMDBD_OPTIONS defines slurmdbd command line options. See "man slurmdbd"
if [ -f /etc/default/slurm ] ; then
  . /etc/default/slurm
else
  SLURMDBD_OPTIONS=""
fi

if [ ! -f $CONFDIR/slurmdbd.conf ]; then
  echo "Could not find $CONFDIR/slurmdbd.conf. Bad path?"
  exit 1
fi

# setup library paths for slurm and munge support
export LD_LIBRARY_PATH=$LIBDIR${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}

# start program
start() {
  prog=$1
  shift
  stat_busy "Starting $prog"
  unset HOME MAIL USER USERNAME
  $SBINDIR/$prog $*
  if [ $? -gt 0 ]; then
    stat_fail
  else
    add_daemon $prog
    stat_done
  fi
}

# stop program
stop() {
  prog=$1
  PID=`pidof -o %PPID $prog`
  [ "$PID" ] && kill $PID &> /dev/null
  if [ $? -gt 0 ]; then
    stat_fail
  else
    rm_daemon $prog
    stat_done
  fi
}

# get slurmdbd status
slurmstatus() {
  local base=${1##*/}
  local pid
  local rpid
  local pidfile

  pidfile=`grep -i pidfile $CONFDIR/slurmdbd.conf | grep -v '^ *#'`
  if [ $? = 0 ]; then
    pidfile=${pidfile##*=}
    pidfile=${pidfile%#*}
  else
    pidfile=/run/${base}.pid
  fi

  pid=`pidof -o $$ -o $$PPID -o %PPID -x $1 || \
  pidof -o $$ -o $$PPID -o %PPID -x ${base}`

  if [ -f $pidfile ]; then
    read rpid < $pidfile
    if [ "$rpid" != "" -a "$pid" != "" ]; then
      for i in $pid ; do
        if [ "$i" = "$rpid" ]; then
          echo $"${base} (pid $pid) is running..."
          return 0
        fi
      done
    elif [ "$rpid" != "" -a "$pid" = "" ]; then
      echo $"${base} dead but pid file exists"
      return 1
    fi

  fi

  if [ "$base" = "slurmdbd" -a "$pid" != "" ] ; then
    echo $"${base} (pid $pid) is running..."
    return 0
  fi

  echo $"${base} is stopped"

  return 3
}

#
# stop slurm daemons,
# wait for termination to complete (up to 10 seconds) before returning
#
slurmstop() {
  prog=$1
  stop $prog

  for i in 1 2 3 4
  do
    sleep $i
    slurmstatus $prog
    if [ $? != 0 ]; then
      break
    fi
  done
}
#
# The pathname substitution in daemon command assumes prefix and
# exec_prefix are same.  This is the default, unless the user requests
# otherwise.
#
# Any node can be a slurm controller and/or server.
#
case "$1" in
  start)
  start slurmdbd
  ;;
  stop)
  slurmstop slurmdbd
  ;;
  status)
  slurmstatus slurmdbd
  ;;
  restart)
  $0 stop
  $0 start
  ;;
  condrestart)
  if [ -f /var/lock/subsys/slurm ]; then
    stop slurmdbd
    start slurmdbd
  fi
  ;;
  reconfig)
  killproc slurmdbd -HUP
  ;;
  *)
  echo "Usage: $0 {start|stop|status|restart|condrestart|reconfig}"
  exit 1
  ;;
esac

rc_exit
